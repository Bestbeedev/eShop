// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id 
  username String
  role String @default("user")
  email String @unique
  password String 
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  Order Order[]
}

model Product{
  id String @id
  name String
  price Decimal
  stock Int
  categoryId String
  description String
  category Category @relation(fields: [categoryId],references: [id])
  OrderDetail OrderDetail[]
  OrderProduct OrderProduct[]
  Inventory Inventory[]
}

model Category{
  id String @id
  name String @unique
  description String?
  products Product[]

}

model Order{
  id String @id
  userId String 
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  totalAmount Decimal
  user User @relation(fields: [userId],references: [id])
  orderDetails OrderDetail[]
  OrderProduct OrderProduct[]
}

model OrderDetail{
  id String @id
  orderId String 
  productId String 
  quantity Int
  unitPrice Decimal
  order Order @relation(fields: [orderId],references: [id])
  product Product @relation(fields: [productId],references: [id])

}



model OrderProduct{
  id Int @id @default(autoincrement())
  orderId String
  productId String 
  order Order @relation(fields: [orderId],references: [id])
  product Product @relation(fields: [productId],references: [id])
}



model Inventory{
  id String @id
  productId String @unique 
  quantity Int
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  lastRestockDate DateTime?
  status InventoryStatus
  product Product @relation(fields: [productId],references: [id])

}
enum InventoryStatus {
  ACTIVE
  OUT_OF_STOCK
  BACK_ORDER
}
